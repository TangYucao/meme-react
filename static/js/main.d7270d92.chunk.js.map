{"version":3,"sources":["logo.svg","components/generator.jsx","components/navbar.jsx","components/picture.jsx","App.js","components/Posts.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Generator","state","react_default","a","createElement","type","name","placeholder","this","props","text1","value","onChange","onTextChange","text2","onClick","onGenerate","className","Component","NavBar","picPercent","imgSrc","text-align","href","Picture","src","randomimage","alt","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleGenerate","index","Math","floor","allMemeImges","length","random","setState","url","generateText1","generateText2","handleTextChange","event","target","generateImgPercent","_this2","fetch","then","response","json","memes","data","console","log","imgId","Fragment","navbar","generator","picture","imgPercent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7270d92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nclass Generator extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"text1\"\r\n            placeholder={this.props.text1}\r\n            value={this.props.text1}\r\n            onChange={this.props.onTextChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"text2\"\r\n            placeholder={this.props.text2}\r\n            value={this.props.text2}\r\n            onChange={this.props.onTextChange}\r\n          />\r\n        </label>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={this.props.onGenerate}\r\n          className=\"btn btn-primary  m-2\"\r\n        >\r\n          Gen\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n  state = {\r\n    picPercent: \"10%\",\r\n    imgSrc: \"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        {/* <img\r\n          src={this.state.imgSrc}\r\n          alt=\"problem\"\r\n          width={this.state.picPercent}\r\n          height={this.state.picPercent}\r\n        /> */}\r\n        <p className=\"navbar-brand\" text-align=\"center\" href=\"#\">\r\n          Yucao's Meme Generator\r\n        </p>\r\n        <br />\r\n        <br />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"../style.css\";\r\nclass Picture extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"meme\">\r\n        <img\r\n          //   className=\"Avatar\"\r\n          //   height={this.props.imgPercent}\r\n          //   width={this.props.imgPercent}\r\n          src={this.props.randomimage}\r\n          alt=\"tyc\"\r\n        />\r\n        <p className=\"top\">{this.props.text1}</p>\r\n        <p className=\"bottom\">{this.props.text2}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Picture;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Generator from \"./components/generator\";\nimport NavBar from \"./components/navbar\";\nimport Picture from \"./components/picture\";\nimport Posts from \"./components/Posts\";\nclass App extends Component {\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then(response => {\n        const { memes } = response.data;\n        this.setState({\n          allMemeImges: memes\n        });\n        console.log(this.state.allMemeImges[0]);\n        console.log(this.state.imgId);\n      });\n  }\n  constructor() {\n    super();\n    this.state = {\n      generateImgPercent: \"40%\",\n      generateText1: \"One Does Not Simply \",\n      generateText2: \"Walk into Mordor\",\n      randomimage: \"https://imgflip.com/s/meme/One-Does-Not-Simply.jpg\",\n      allMemeImges: []\n    };\n  }\n\n  handleGenerate = () => {\n    const index = Math.floor(this.state.allMemeImges.length * Math.random());\n    this.setState({\n      randomimage: this.state.allMemeImges[index].url,\n      generateText1: this.state.generateText1,\n      generateText2: this.state.generateText2\n    });\n  };\n  handleTextChange = event => {\n    switch (event.target.name) {\n      case \"text1\": {\n        this.setState({\n          generateText1: event.target.value\n        });\n        break;\n      }\n      case \"text2\": {\n        this.setState({\n          generateText2: event.target.value\n        });\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n        // totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Generator\n            text1={this.state.generateText1}\n            text2={this.state.generateText2}\n            onTextChange={this.handleTextChange}\n            // onTextChange2={this.handleTextChange2}\n            onGenerate={this.handleGenerate}\n          />\n          <Picture\n            imgPercent={this.state.generateImgPercent}\n            randomimage={this.state.randomimage}\n            text1={this.state.generateText1}\n            text2={this.state.generateText2}\n          />\n        </main>\n        {/* <Posts /> */}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\n\r\nclass Posts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: []\r\n    };\r\n  }\r\n  state = {};\r\n  componentWillMount() {\r\n    console.log(\"fetching...\");\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          posts: data\r\n        })\r\n      );\r\n  }\r\n  render() {\r\n    const postItems = this.state.posts.map(post => (\r\n      <div key={post.id}>\r\n        <h3>{post.title}</h3>\r\n        <p>{post.body}</p>\r\n      </div>\r\n    ));\r\n    return (\r\n      <div>\r\n        <h1>Posts</h1>\r\n        {postItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}